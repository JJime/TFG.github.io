
#
# WepSIM (https://wepsim.github.io/wepsim/)
#

.text
  main:
        li a2 0

        #
        # Arithmetic instructions
        #

        # notify: skip1st:true showas:offcanvas glow:btn_run_stop_exebar1 scroll2current:true showdetails:register_file
        # notify: TIP: add two numbers
        # notify: Instructions -> add, addi
        # notify: <ul>
        # notify: <li> add   register-result register-operand-1 register-operand-2
        # notify: <li> addi  register-result register-operand-1 immediate-value
        # notify: </ul>
        li      a0, 3
        li      a1, 2
        add     a2, a0, a1   # a2 = 3 + 2
        addi    a2, a0, 10   # a2 = 3 + 10

        # notify: skip1st:true showas:offcanvas glow:btn_run_stop_exebar1 scroll2current:true showdetails:register_file
        # notify: TIP: substract two numbers
        # notify: Instructions -> sub
        # notify: <ul>
        # notify: <li> sub   register-result register-operand-1 register-operand-2
        # notify: <li> subi  rd, rs1, #val -> addi rd, rs1, -#val
        # notify: </ul>
        li      a0, 0
        li      a1, 2
        sub     a2, a0, a1   # a2 = 0 - 2

        # notify: skip1st:true showas:offcanvas glow:btn_run_stop_exebar1 scroll2current:true showdetails:register_file
        # notify: TIP: multiply two numbers
        # notify: Instructions -> mul
        # notify: <ul>
        # notify: <li> mul  register-result register-operand-1 register-operand-2
        # notify: </ul>
        li      a0, 5
        li      a1, 2
        mul     a2, a0, a1   # a2 = 5 <li> 2

        # notify: skip1st:true showas:offcanvas glow:btn_run_stop_exebar1 scroll2current:true showdetails:register_file
        # notify: TIP: divide signed
        # notify: Instructions -> div
        # notify: <ul>
        # notify: <li> div  register-result register-operand-1 register-operand-2
        # notify: </ul>
        li      a0, 6
        li      a1, 2
        div     a2, a0, a1   # a2 = 6 / 2

        # notify: skip1st:true showas:offcanvas glow:btn_run_stop_exebar1 scroll2current:true showdetails:register_file
        # notify: TIP: remainder signed
        # notify: Instructions -> rem
        # notify: <ul>
        # notify: <li> rem  register-result register-operand-1 register-operand-2
        # notify: </ul>
        li      a0, 5
        li      a1, 2
        rem     a2, a0, a1   # a2 = 5 % 2


        #
        # Logic instructions
        #

        # notify: skip1st:true showas:offcanvas glow:btn_run_stop_exebar1 scroll2current:true showdetails:register_file
        # notify: TIP: bitwise Or
        # notify: Instructions -> or, ori
        # notify: <ul>
        # notify: <li> or   register-result register-operand-1 register-operand-2
        # notify: <li> ori  register-result register-operand-1 immediate-value
        # notify: </ul>
        li      a0, 0xF875
        li      a1, 0x00FF
        or      a2, a0, a1    # a2 = 0xF875 | 0x00FF
        ori     a3, a0, 0xFF  # a2 = 0xF875 | 0x00FF

        # notify: skip1st:true showas:offcanvas glow:btn_run_stop_exebar1 scroll2current:true showdetails:register_file
        # notify: TIP: bitwise and
        # notify: Instructions -> and, andi
        # notify: <ul>
        # notify: <li> and  register-result register-operand-1 register-operand-2
        # notify: <li> andi register-result register-operand-1 immediate-value
        # notify: </ul>
        li      a0, 0xF875
        li      a1, 0x00FF
        and     a2, a0, a1    # a2 = 0xF875 & 0x00FF
        andi    a3, a0, 0xFF  # a2 = 0xF875 & 0x00FF

        # notify: skip1st:true showas:offcanvas glow:btn_run_stop_exebar1 scroll2current:true showdetails:register_file
        # notify: TIP: bitwise xor
        # notify: Instructions -> xor, xori
        # notify: <ul>
        # notify: <li> xor  register-result register-operand-1 register-operand-2
        # notify: <li> xori register-result register-operand-1 immediate-value
        # notify: </ul>
        li      a0, 0xF875
        li      a1, 0x00FF
        xor     a2, a0, a1    # a2 = 0xF875 ^ 0x00FF
        xori    a3, a0, 0xFF  # a2 = 0xF875 ^ 0x00FF


        #
        # Shift instructions
        #

        # notify: skip1st:true showas:offcanvas glow:btn_run_stop_exebar1 scroll2current:true showdetails:register_file
        # notify: TIP: shift right logical
        # notify: Instructions -> srl, srli
        # notify: <ul>
        # notify: <li> srl  register-result register-operand-1 register-operand-2
        # notify: <li> srli register-result register-operand-1 immediate-value
        # notify: </ul>
        li      a0, 0x010
        li      a1, 0x3
        srl     a2, a0, a1   # a2 = 0x010 >> 3
        srli    a2, a0, 3    # a2 = 0x010 >> 3

        # notify: skip1st:true showas:offcanvas glow:btn_run_stop_exebar1 scroll2current:true showdetails:register_file
        # notify: TIP: shift left logical
        # notify: Instructions -> sll, slli
        # notify: <ul>
        # notify: <li> ssl  register-result register-operand-1 register-operand-2
        # notify: <li> ssli register-result register-operand-1 immediate-value
        # notify: </ul>
        li      a0, 0x010
        li      a1, 0x3
        sll     a2, a0, a1   # a2 = 0x010 << 3
        slli    a2, a0, 3    # a2 = 0x010 << 3

        # notify: skip1st:true showas:offcanvas glow:btn_run_stop_exebar1 scroll2current:true showdetails:register_file
        # notify: TIP: shift right arithmetic
        # notify: Instructions -> sra, srai
        # notify: <ul>
        # notify: <li> sra  register-result register-operand-1 register-operand-2
        # notify: <li> sra  register-result register-operand-1 immediate-value
        # notify: </ul>
        li      a0, 0x010
        li      a1, 0x3
        sra     a2, a0, a1   # a2 = 0x010 >> 3
        srai    a2, a0, 3    # a2 = 0x010 >> 3


        # return
        jr      ra

